openapi: 3.0.0
info:
  title: Expense Tracker API
  description: API for managing and tracking personal expenses.
  version: 1.0.0

servers:
  - url: /api/v1
    description: Development server

tags:
  - name: auth
    description: Authentication operations
  - name: expenses
    description: Expense operations

paths:
  /auth/register:
    post:
      operationId: createUser
      summary: Register a new user
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid data

  /auth/login:
    post:
      operationId: loginUser
      summary: Log in and generate JWT
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Incorrect credentials

  /expenses:
    get:
      operationId: listExpenses
      summary: List and filter expenses
      x-spring-paginated: true
      tags:
        - expenses
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [ last_week, last_month, last_3_months, custom ]
          description: Filter to list expenses
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for custom filter
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for custom filter
      responses:
        '200':
          description: Filtered list of expenses
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ExpensePaginated'
        '400':
          description: Invalid data
        '401':
          description: Unauthorized

    post:
      operationId: createExpense
      summary: Create a new expense
      tags:
        - expenses
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCreate'
      responses:
        '201':
          description: Expense created successfully
          headers:
            Location:
              description: URI of the newly created expense
              schema:
                type: string
                format: uri
        '400':
          description: Invalid data
        '401':
          description: Unauthorized

  /expenses/{expenseId}:
    put:
      operationId: updateExpense
      summary: Update an existing expense
      tags:
        - expenses
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
      responses:
        '200':
          description: Expense updated successfully
        '404':
          description: Expense not found
        '401':
          description: Unauthorized

    delete:
      operationId: deleteExpense
      summary: Delete an existing expense
      tags:
        - expenses
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Expense deleted successfully
        '404':
          description: Expense not found
        '401':
          description: Unauthorized

components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
    Money:
      type: object
      properties:
        value:
          type: integer
          format: int64
        exponent:
          type: integer
          format: int32
    ExpenseCreate:
      type: object
      properties:
        description:
          type: string
        transactionDate:
          type: string
          format: date
        amount:
          $ref: '#/components/schemas/Money'
        paymentMethod:
          type: string
          enum: [ CASH, CREDIT_CARD, DEBIT_CARD, CHECK, TRANSFER ]
        vendor:
          type: string
        recurrence:
          type: string
          enum: [ NONE, DAILY, WEEKLY, BIWEEKLY, MONTHLY, YEARLY ]
        notes:
          type: string
    ExpensePaginated:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Expense'
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int32
    Expense:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        transactionDate:
          type: string
          format: date
        amount:
          $ref: '#/components/schemas/Money'
        paymentMethod:
          type: string
          enum: [ CASH, CREDIT_CARD, DEBIT_CARD, CHECK, TRANSFER ]
        vendor:
          type: string
        recurrence:
          type: string
          enum: [ NONE, DAILY, WEEKLY, BIWEEKLY, MONTHLY, YEARLY ]
        notes:
          type: string
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string

security:
  - BearerAuth: [ ]

