name: Create and publish release
run-name: ${{ github.ref }} Create and publish release.

on:
  pull_request:
    types: [closed]
    branches:
      - 'release/*'

permissions:
  contents: write
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 0

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --passphrase "${{ secrets.GPG_PASSPHRASE }}" --import
          gpg --list-secret-keys --keyid-format LONG
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure git to use GPG signing
        run: |
          git config user.name "GitHub Actions"
          git config user.email "1618926+jalucenyo@users.noreply.github.com"
          git config --global user.signingkey ${{ secrets.GPG_KEY_ID }}
          git config --global commit.gpgSign true

      - name: Verify GPG setup
        run: |
          echo "Test message" | gpg --clear-sign --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}"

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'graalvm'
          cache: 'maven'
          server-id: 'github'
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Setup Maven Cache
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get release version
        id: get_release_version
        run: |
          RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          NEXT_VERSION=$(echo ${RELEASE_VERSION} | awk -F. -v OFS=. '{$NF = $NF + 1;} 1')-SNAPSHOT
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Prepare Release
        run: |
          mvn -B versions:set -DnewVersion=${{ steps.get_release_version.outputs.RELEASE_VERSION }} -DgenerateBackupPoms=false
          mvn -B clean install

      - name: Commit Release Version
        run: |
          export GPG_TTY=$(tty)
          git add pom.xml
          git commit -S --gpg-sign -m "[GitHub Actions] Release version ${{ steps.get_release_version.outputs.RELEASE_VERSION }}"

      - name: Tag Release Version
        run: |
          git tag -s -m "Release version ${{ steps.get_release_version.outputs.RELEASE_VERSION }}" v${{ steps.get_release_version.outputs.RELEASE_VERSION }}

      - name: Prepare Next Development Version
        run: |
          mvn -B versions:set -DnewVersion=${{ steps.get_release_version.outputs.NEXT_VERSION }} -DgenerateBackupPoms=false

      - name: Commit Next Development Version
        run: |
          git add pom.xml
          git commit -S --gpg-sign -m "[GitHub Actions] Prepare for next development iteration"

      - name: Push Changes
        run: |
          git push origin HEAD:${{ github.head_ref || github.ref_name }}
          git push origin v${{ steps.get_release_version.outputs.RELEASE_VERSION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release version
        id: get_version
        run: echo "RELEASE_VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/expenses-tracker-service:${{ steps.get_version.outputs.RELEASE_VERSION }} .
          docker push ghcr.io/${{ github.repository }}/expenses-tracker-service:${{ steps.get_version.outputs.RELEASE_VERSION }}
          
          docker build -t ghcr.io/${{ github.repository }}/expenses-tracker-service:latest .
          docker push ghcr.io/${{ github.repository }}/expenses-tracker-service:latest

      - name: Create page release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.get_version.outputs.RELEASE_VERSION }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release ${tag}" \
              --generate-notes
